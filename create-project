#!/usr/bin/env python3
import subprocess
from datetime import datetime

from os import system, path, mkdir, name
from sys import argv, stderr

from src.content import *
from src.utils import *


script_basename = path.basename(argv[0])


def error_pars(msg: str):
    print(f'{script_basename}: error: {msg}', file=stderr)
    exit(1)


def main():

    project_path = ''
    try:
        project_path = argv[1]
    except IndexError:
        error_pars('enter name')

    if not is_camel_case(project_path):
        error_pars(f'"{project_path}" must be CamelCase')

    try:
        mkdir(project_path)
    except FileExistsError:
        error_pars(f'project "{project_path}" exists')

    script_name = get_script_name(path.basename(project_path))
    github_nickname = subprocess.check_output(['git', 'config', 'user.name']).decode().strip()

    dirs = ['test', 'src']
    files = (
        ('.gitignore', gitignore),
        ('README.md',
         readme_md.format(project_path=project_path, github_nickname=github_nickname, script_name=script_name)),
        (script_name, main_py),
        ('requirements.txt', ''),
        ('LICENSE', license_.format(year=datetime.now().year, github_nickname=github_nickname)),
        (path.join(dirs[0], 'tests.py'), tests_py),
        (path.join(dirs[1], 'utils.py'), utils_py)
    )

    make_dirs(project_path, dirs)
    write_files(project_path, files)
    system(f'virtualenv {path.join(project_path, "venv")}')  # виртуальное окружение
    git_init(project_path)

    if name == 'posix':
        system(f'chmod u+x {path.join(project_path, script_name)}')  # разрешение на запуск

        if '--link' in argv:
            try:
                create_symbolic_link(project_path, script_name)
            except FileNotFoundError as e:
                error_pars(str(e))

        if '--secret' in argv:
            secret(project_path)


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
import argparse
import sys

from src.content import *
from src.CreateProject import CreateProjectCreator, CreateProject

from src.CreateProject import MutualOptionsError, NotCamelCaseError, ForbiddenScriptNameError


parser = argparse.ArgumentParser(description='Creates python project, initialize git repository '
                                             'and creates virtual environment')

mutually = parser.add_mutually_exclusive_group()

parser.add_argument(dest='project_name', nargs='+',
                    help='name of python project (must be CamelCase)')

parser.add_argument('-s', '--secure', dest='secure', action='store_true',
                    help='makes project secure')

parser.add_argument('-q', '--quiet', dest='quiet', action='store_true',
                    help='quiet mode')

mutually.add_argument('-f', dest='ask_force', action='store_true',
                      help='asks to re-write existing project')

mutually.add_argument('--force', dest='no_ask_force', action='store_true',
                      help='NO asks re-write existing project')

parser.add_argument('--create-link', dest='create_link', action='store_true',
                    help='creates symbolic link in ~/bin')

parser.add_argument('--script-name', dest='script_name', action='store', default=None,
                    help='name of main script')

parser.add_argument('--git-login', dest='git_login', action='store', default=None,
                    help='GitHub login')

parser.add_argument('--license', dest='license_', action='store', default='mit',
                    choices=list(licenses.keys()),
                    help='license for your project')

args = parser.parse_args()


def parse_error(msg):
    print(f'{CreateProject.create_project_script_name}: error: {msg}', file=sys.stderr)


def main():
    for project in args.project_name:
        try:
            CreateProjectCreator(project, args)
        except StopIteration:
            pass
        except NotCamelCaseError as e:
            parse_error(e)
        except MutualOptionsError as e:
            parse_error(e)
            exit(1)
        except ForbiddenScriptNameError as e:
            parse_error(e)
            exit(1)


if __name__ == '__main__':
    main()
